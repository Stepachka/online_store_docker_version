name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Client Build Job
  client-build:
    name: Build Client
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build client
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/
        retention-days: 7

  # Client Test Job
  client-test:
    name: Test Client
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run client tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: client-coverage
        path: client/coverage/
        retention-days: 7

  # Server Build Job
  server-build:
    name: Build Server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Build server
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: server-build
        path: server/dist/
        retention-days: 7

  # Server Test Job
  server-test:
    name: Test Server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Run server tests
      run: npm test -- --coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Run e2e tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: server-coverage
        path: server/coverage/
        retention-days: 7

  # Integration Test Job (runs after both client and server tests pass)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [client-test, server-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install server dependencies
      run: |
        cd server
        npm ci
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Start server
      run: |
        cd server
        npm run start:prod &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Install client dependencies
      run: |
        cd client
        npm ci
        
    - name: Build client
      run: |
        cd client
        npm run build
        
    - name: Test client build
      run: |
        cd client
        npx serve -s build -l 3000 &
        sleep 5
        curl -f http://localhost:3000 || exit 1

  # Deploy Job (only runs on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [client-build, server-build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download client build artifacts
      uses: actions/download-artifact@v4
      with:
        name: client-build
        path: client/build/
        
    - name: Download server build artifacts
      uses: actions/download-artifact@v4
      with:
        name: server-build
        path: server/dist/
        
    - name: Deploy to production
      run: |
        echo "Deployment steps would go here"
        echo "Client build ready at: client/build/"
        echo "Server build ready at: server/dist/"
