name: Main CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - "client/**"
      - "server/**"
      - ".github/workflows/main-ci-cd.yml"

jobs:
  # Client CI
  client-ci:
    name: Client CI
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'client') || contains(github.event.head_commit.message, 'all')

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: "client/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test -- --watchAll=false --coverage --passWithNoTests

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/online-shop-client:latest

  # Server CI
  server-ci:
    name: Server CI
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'server') || contains(github.event.head_commit.message, 'all')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: "server/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client and run migrations
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test -- --coverage --passWithNoTests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
          NODE_ENV: test

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/online-shop-server:latest

  # Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [client-ci, server-ci] # Зависит от успеха обоих CI jobs
    if: always() && (needs.client-ci.result == 'success' || needs.server-ci.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible-galaxy collection install community.docker

      - name: Create SSH private key file
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Run Ansible playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --private-key ./private_key \
            -e "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" \
            -e "dockerhub_token=${{ secrets.DOCKERHUB_TOKEN }}" \
            -e "ansible_host=${{ secrets.SERVER_IP }}" \
            -v
